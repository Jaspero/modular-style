/*==================================================

  FLUID VARIABLES
  
==================================================*/

// FLUID â€“ min & max screen sizes
$min-vw: 60rem;
$max-vw: 140rem;

// Fluid helper
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}


/*==================================================

  FLUID MARGIN & PADDING
  
==================================================*/

@mixin fluid($max, $min, $prop) {

  $maxTop: 0;
  $maxRight: 0;
  $maxBottom: 0;
  $maxLeft: 0;

  $minTop: 0;
  $minRight: 0;
  $minBottom: 0;
  $minLeft: 0;

  @if length($max) == 1 {
    $maxTop: $max;
    $maxRight: $max;
    $maxBottom: $max;
    $maxLeft: $max;
  }
  @if length($max) == 2 {
    $maxTop: nth($max, 1);
    $maxRight: nth($max, 2);
    $maxBottom: nth($max, 1);
    $maxLeft: nth($max, 2);
  }
  @if length($max) == 3 {
    $maxTop: nth($max, 1);
    $maxRight: nth($max, 2);
    $maxBottom: nth($max, 3);
    $maxLeft: nth($max, 2);
  }
  @if length($max) == 4 {
    $maxTop: nth($max, 1);
    $maxRight: nth($max, 2);
    $maxBottom: nth($max, 3);
    $maxLeft: nth($max, 4);
  }

  @if length($min) == 1 {
    $minTop: $min;
    $minRight: $min;
    $minBottom: $min;
    $minLeft: $min;
  }
  @if length($min) == 2 {
    $minTop: nth($min, 1);
    $minRight: nth($min, 2);
    $minBottom: nth($min, 1);
    $minLeft: nth($min, 2);
  }
  @if length($min) == 3 {
    $minTop: nth($min, 1);
    $minRight: nth($min, 2);
    $minBottom: nth($min, 3);
    $minLeft: nth($min, 2);
  }
  @if length($min) == 4 {
    $minTop: nth($min, 1);
    $minRight: nth($min, 2);
    $minBottom: nth($min, 3);
    $minLeft: nth($min, 4);
  }

  & {
    #{$prop}-top: $minTop;
    #{$prop}-right: $minRight;
    #{$prop}-bottom: $minBottom;
    #{$prop}-left: $minLeft;

    @media screen and (min-width: $min-vw) {
      #{$prop}-top: calc(#{$minTop} + #{strip-unit($maxTop - $minTop)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      #{$prop}-right: calc(#{$minRight} + #{strip-unit($maxRight - $minRight)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      #{$prop}-bottom: calc(#{$minBottom} + #{strip-unit($maxBottom - $minBottom)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      #{$prop}-left: calc(#{$minLeft} + #{strip-unit($maxLeft - $minLeft)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
    }
    @media screen and (min-width: $max-vw) {
      #{$prop}-top: $maxTop;
      #{$prop}-right: $maxRight;
      #{$prop}-bottom: $maxBottom;
      #{$prop}-left: $maxLeft;
    }
  }
}


/*==================================================

  FLUID FONT-SIZE

==================================================*/

@mixin font-size($max, $min) {
  & {
    font-size: $min;
    @media screen and (min-width: $min-vw) {
      font-size: calc(#{$min} + #{strip-unit($max - $min)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
    }
    @media screen and (min-width: $max-vw) {
      font-size: $max;
    }
  }
}


/*==================================================

  SHORTHAND MARGIN & PADDING

==================================================*/

$spacer: 1rem;
$spacer-x: $spacer;
$spacer-y: $spacer;
$spacers: ();

@for $i from 0 through 5 {
  $spacers: map-merge($spacers, (
    $i: (
      x: $spacer-x * $i,
      y: $spacer-y * $i
    )
  ))
}

@each $prop, $abbrev in (margin: m, padding: p) {
  @each $size, $lengths in $spacers {
    $length-x:   map-get($lengths, x);
    $length-y:   map-get($lengths, y);

    .#{$abbrev}-a-#{$size} { #{$prop}:        $length-x}
    .#{$abbrev}-t-#{$size} { #{$prop}-top:    $length-y}
    .#{$abbrev}-r-#{$size} { #{$prop}-right:  $length-x}
    .#{$abbrev}-b-#{$size} { #{$prop}-bottom: $length-y}
    .#{$abbrev}-l-#{$size} { #{$prop}-left:   $length-x}

    .#{$abbrev}-x-#{$size} {
      #{$prop}-right:  $length-x;
      #{$prop}-left:   $length-x;
    }
    .#{$abbrev}-y-#{$size} {
      #{$prop}-top:    $length-y;
      #{$prop}-bottom: $length-y;
    }
  }
}


/*==================================================

  LIGHTEN & DARKEN

==================================================*/

@function lighten($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function darken($color, $percentage) {
  @return mix(black, $color, $percentage);
}


/*==================================================

  OVERLAY

==================================================*/

@mixin overlay($overlayColor) {

  background-color: $overlayColor;
  background-blend-mode: overlay;

  /* IE10+ fallback */
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    position: relative;
    &:after {
      content: '';
      display: block;
      z-index: 0;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: $overlayColor;
    }
    & > * {
      position: relative;
      z-index: 1;
    }
  }

  /* Microsoft Edge fallback */
  @supports (-ms-ime-align: auto) {
    position: relative;
    &:after {
      content: '';
      display: block;
      z-index: 0;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: $overlayColor;
    }
    & > * {
      position: relative;
      z-index: 1;
    }
  }
  
}